#!/bin/bash -e

set -e

if [[ $1 == reset ]]; then
    umount -R -l /mnt/root
fi

# Libs START
function c_green() {
    printf "\e[38;5;118m$1\e[0m"
}

function task_selectVariantTarball() {
    function subtask_askVariant() {
        echo ""
        echo "Downloader Step 2: $(c_green 'Choose variant')"
        echo "===================================="
        echo "Which variant would you like to download?"
        echo ""
        source /root/.os-install/etc/x-askVariant.sh

        read selectedVARIANT
        FOUND_GOOD_VARIANT=0
        for (( i = 0; i < $(($NUM_MAX_ALLOW+1)); i++ )); do
            if [[ $selectedVARIANT == ${VARIANT_INDEX_ARR[$i]} ]]; then
                FOUND_GOOD_VARIANT=1
            fi
        done
        if [[ $FOUND_GOOD_VARIANT == 0 ]]; then
            echo ""
            echo -e "[ERR] Please give a valid number. (0~$NUM_MAX_ALLOW)\n\n"
            subtask_askVariant
        else
            subtask_askArch $selectedVARIANT
        fi
    }

    function subtask_askArch() {
        selectedVARIANT=$1
        echo ""
        echo "Downloader Step 3: $(c_green 'Choose architecture')"
        echo "===================================="
        echo "Which architecture would you like to use?"
        echo ""

        source /root/.os-install/selfmake/variant-archs/$selectedVARIANT

        read selectedARCH
        isVALIDINPUT=0
        for (( i = 0; i < $(($NUM_MAX_ALLOW+1)); i++ )); do
            if [[ $selectedARCH == ${ARCH_INDEX_ARR[$i]} ]]; then
                isVALIDINPUT=1
            fi
        done
        if [[ $isVALIDINPUT == 0 ]]; then
            echo ""
            echo -e "[ERR] Please give a valid number. (0~$NUM_MAX_ALLOW)\n\n"
            subtask_askArch $selectedVARIANT
        else
            subtask_askTarball $selectedVARIANT $selectedARCH
        fi
    }

    function subtask_askTarball() {
        selectedVARIANT=$1
        selectedARCH=$2
        echo ""
        echo "Downloader Step 4: $(c_green 'Choose tarball')"
        echo "===================================="
        echo "Which tarball would you like to use?"
        echo ""

        source /root/.os-install/selfmake/variant-arch-tarballs/$selectedVARIANT-$selectedARCH

        read selectedTARBALL
        isVALIDINPUT=0
        for (( i = 0; i < $(($NUM_MAX_ALLOW+1)); i++ )); do
            if [[ $selectedARCH == ${TARBALL_INDEX_ARR[$i]} ]]; then
                isVALIDINPUT=1
            fi
        done
        if [[ $isVALIDINPUT == 0 ]]; then
            echo ""
            echo -e "[ERR] Please give a valid number. (0~$NUM_MAX_ALLOW)\n\n"
            subtask_askTarball $selectedVARIANT $selectedARCH
        else
            subtask_askMirror $selectedVARIANT $selectedARCH $selectedTARBALL
        fi
    }

    function subtask_askMirror() {
        selectedVARIANT=$1
        selectedARCH=$2
        selectedTARBALL=$3
        echo ""
        echo "Downloader Step 5: $(c_green 'Choose mirror')"
        echo "===================================="
        echo "Which tarball would you like to use?"
        echo ""

        source /root/.os-install/etc/x-askMirror.sh

        read selectedMIRROR
        isVALIDINPUT=0
        for (( i = 0; i < $(($NUM_MAX_ALLOW+1)); i++ )); do
            if [[ $selectedMIRROR == ${MIRROR_INDEX_ARR[$i]} ]]; then
                isVALIDINPUT=1
            fi
        done
        if [[ $isVALIDINPUT == 0 ]]; then
            echo ""
            echo -e "[ERR] Please give a valid number. (0~$NUM_MAX_ALLOW)\n\n"
            subtask_askMirror $selectedVARIANT $selectedARCH $selectedTARBALL
        else
            # Continue
            subtask_startDownload $selectedVARIANT $selectedARCH $selectedTARBALL $selectedMIRROR
        fi
    }

    function subtask_startDownload() {
        selectedVARIANT=$1
        selectedARCH=$2
        selectedTARBALL=$3
        selectedMIRROR=$4
        source /root/.os-install/selfmake/variant-arch-tarball-detail/$selectedVARIANT-$selectedARCH-$selectedTARBALL
        source /root/.os-install/selfmake/mirrors/$selectedMIRROR
        echo ""
        echo $(c_green "Starting to download...")
        echo ""
        echo "   (Fake Download Demo)"
        echo "   (Put file to /mnt/root/downloaded_os.tar.xz)"
    }

    echo ""
    echo "Downloader Step 1: $(c_green 'Download or skip')"
    echo "===================================="
    printf "Do you want to download now? (Y/n) "
    read isDOWNLOADNOW
    echo ""
    case $isDOWNLOADNOW in
        y*|Y*)
            subtask_askVariant
            ;;
        *)
            exit 0
            ;;
    esac
}

function task_untarTarball() {
    BOOTMODE=$1
    GRUBPATH=$2

    cd /mnt/root/
    tar --numeric-owner -pxvf /mnt/root/os_tar_download/downloaded_os.tar.xz

    # Generate fstab
    /mnt/root/usr/bin/genfstab -U -p /mnt/root >> /mnt/root/etc/fstab

    # Mount
    mkdir /mnt/root/run/udev
    for i in dev proc sys run/udev; do mount --rbind /$i /mnt/root/$i; done

    # Stage 3
    RUNMEPATH=/mnt/root/RUNME.sh

    cat << ENDOFFILE >> $RUNMEPATH
#!/bin/bash -e
set -e
BOOTMODE=$BOOTMODE
GRUBPATH="$GRUBPATH"
ENDOFFILE

    cat /root/.os-install/src/stage3.sh >> $RUNMEPATH
    chmod 755 /mnt/root/RUNME.sh

    cat << ENDOFFILE
======================================

Sit back and relax. Half done now.

What to do next? Run these commands:

    \e[38;5;118mchroot /mnt/root /bin/bash\e[0m
    \e[38;5;118mexport PS1="(chroot) \$PS1"\e[0m
    \e[38;5;118m./RUNME.sh\e[0m

ENDOFFILE

}

function task_selectPartition() {
    BOOTMODE=$1
    if [[ $BOOTMODE = EFI ]]; then
        TARGETTYPE="ESP"
    else
        TARGETTYPE="disk"
    fi
    lsblk
    printf "Select your installation root partition: /dev/"
    read selectedROOTP
    printf "Select your ${TARGETTYPE}: /dev/"
    read selectedGRUBPATH

    # Mount
    mount /dev/$selectedROOTP /mnt/root

    # Download
    task_selectVariantTarball

    # Untar
    task_untarTarball $BOOTMODE $selectedGRUBPATH
}
function task_welcome() {
    source /etc/os-release
    echo "==============================================="
    echo "Welcome to OS-Install utility"
    echo "==============================================="
    echo ""

    ## Instructions
    echo "Now you may install this OS on your machine."
    lsblk
    echo ""
    echo "Do you need to manage partitions? (y/N)"
    read isNEEDMANAGEPARTITION
    if [[ ${isNEEDMANAGEPARTITION,,} == y ]]; then
        echo "Ok. When you have completed, please run 'os-install install' to start over."
        exit 0
    fi

    ## Select boot mode
    function task_selectBootMode() {
        echo ""
        echo "Select your Boot Mode. Do you like EFI or BIOS?"
        echo "If this is a modern device (after 2010), it may use EFI mode."
        echo "  1: EFI"
        echo "  2: BIOS"
        printf "Make your choice now (1 or 2): "
        read selectedBOOTMODE

        case $selectedBOOTMODE in
            1)
                task_selectPartition EFI
                ;;
            2)
                task_selectPartition BIOS
                ;;
            *)
                echo "Please select 1 or 2."
                echo ""
                task_selectBootMode
                ;;
        esac
    }
    task_selectBootMode
}

# Initialize
SUBCOMMAND=$1
ARG0=$2
ARG1=$3

task_welcome
